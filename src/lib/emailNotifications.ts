// ===== CLIENTE SUPABASE PARA BANCO DE DADOS =====
// Importa o cliente configurado do Supabase para opera√ß√µes de banco
// üîÑ ADAPTA√á√ÉO PARA OUTROS BANCOS:
// - MySQL/PostgreSQL: import mysql2, pg, ou prisma
// - MongoDB: import mongoose ou mongodb driver 
// - Firebase: import { getFirestore } from 'firebase/firestore'
import { supabase } from '@/integrations/supabase/client';

// ===== INTERFACE DOS DADOS DA RESERVA =====
// Define a estrutura dos dados que ser√£o enviados por e-mail
// üìù Cont√©m todas as informa√ß√µes necess√°rias da reserva
interface ReservationData {
  id: string;                    // ID √∫nico da reserva
  equipment_type: string;        // Tipo do equipamento (projector, auditorium, laboratory_XX)
  reservation_date: string;      // Data da reserva no formato YYYY-MM-DD
  observation?: string;          // Observa√ß√£o opcional do usu√°rio
  time_slots?: string[];         // Hor√°rios para audit√≥rio (morning, afternoon, evening)
  user_id: string;              // ID do usu√°rio que fez a reserva
}

// ===== FUN√á√ÉO PRINCIPAL DE ENVIO DE NOTIFICA√á√ÉO =====
// Esta fun√ß√£o coordena todo o processo de envio de e-mail para administradores
// quando uma reserva √© criada ou cancelada
export const sendReservationNotification = async (
  reservationData: ReservationData, 
  action: 'created' | 'cancelled'  // üìù A√ß√£o realizada: cria√ß√£o ou cancelamento
) => {
  try {
    // ===== BUSCAR DADOS DO PERFIL DO USU√ÅRIO =====
    // Precisamos do nome do usu√°rio para incluir no e-mail
    // üîÑ ADAPTA√á√ÉO PARA OUTROS BANCOS:
    // - MySQL: SELECT display_name, institutional_user FROM profiles WHERE user_id = ?
    // - MongoDB: db.profiles.findOne({user_id: reservationData.user_id})
    // - Firebase: doc(db, 'profiles', reservationData.user_id).get()
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('display_name, institutional_user')
      .eq('user_id', reservationData.user_id)
      .single();

    // ===== VALIDAR SE ENCONTROU O PERFIL =====
    if (profileError || !profile) {
      console.error('‚ùå Erro ao buscar perfil do usu√°rio para notifica√ß√£o:', profileError);
      return; // üõë Para a execu√ß√£o se n√£o encontrar o usu√°rio
    }

    // ===== BUSCAR E-MAIL DO USU√ÅRIO AUTENTICADO =====
    // Obt√©m o e-mail do usu√°rio atual do sistema de autentica√ß√£o
    // üìß Este ser√° o "de quem" no e-mail enviado aos administradores
    // üîÑ ADAPTA√á√ïES PARA OUTROS SISTEMAS DE AUTH:
    // - Firebase Auth: getAuth().currentUser?.email
    // - Auth0: useUser() hook ou Auth0 Management API
    // - AWS Cognito: getCurrentUser() e getUserAttributes()
    // - JWT customizado: decodificar token e buscar e-mail
    const { data: authUser, error: authError } = await supabase.auth.getUser();
    
    if (authError || !authUser.user?.email) {
      console.error('‚ùå Erro ao buscar e-mail do usu√°rio para notifica√ß√£o:', authError);
      return; // üõë Para se n√£o conseguir obter o e-mail
    }

    // ===== PREPARAR DADOS PARA O E-MAIL =====
    // Monta objeto com todas as informa√ß√µes necess√°rias para o e-mail
    const notificationData = {
      reservationData,                    // Dados completos da reserva
      userName: profile.display_name,     // Nome do usu√°rio
      userEmail: authUser.user.email,     // E-mail do usu√°rio
      action                              // A√ß√£o (created/cancelled)
    };

    console.log('üöÄ [FRONTEND] Enviando notifica√ß√£o de reserva:', notificationData);
    console.log('üìß [FRONTEND] A√ß√£o:', action, 'Equipamento:', reservationData.equipment_type);

    // ===== CONFIGURAR TIMEOUT PARA O E-MAIL =====
    // Cria uma Promise que falha ap√≥s 5 segundos para evitar travamento
    // üîÑ ALTERNATIVAS:
    // - AbortController para cancelar fetch nativo
    // - Axios timeout para bibliotecas HTTP
    // - Queue de e-mails em background (Redis, Bull, etc.)
    const timeoutPromise = new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Email notification timeout')), 5000)
    );
    
    // ===== CHAMAR EDGE FUNCTION PARA ENVIO DE E-MAIL =====
    // Esta √© uma fun√ß√£o serverless que processa o envio via Resend.com
    // üìß A Edge Function cuida de:
    // - Buscar e-mails dos administradores no banco
    // - Formatar o HTML do e-mail
    // - Enviar via API do Resend respeitando rate limits
    // üîÑ ADAPTA√á√ÉO PARA OUTROS SISTEMAS:
    // - Node.js: fetch('/api/send-email', {method: 'POST', body: ...})
    // - PHP: curl para endpoint interno ou servi√ßo de e-mail
    // - Python: requests.post() para API Flask/FastAPI
    // - .NET: HttpClient.PostAsync() para endpoint ASP.NET
    const emailPromise = supabase.functions.invoke('send-reservation-notification', {
      body: notificationData
    });
    
    // ===== EXECUTAR COM TIMEOUT =====
    // Promise.race garante que se o e-mail demorar mais que 5s, vai falhar
    // Isso evita travar a interface do usu√°rio
    const { data, error } = await Promise.race([emailPromise, timeoutPromise]) as any;

    // ===== TRATAMENTO DE ERRO NO ENVIO =====
    if (error) {
      console.error('‚ùå [FRONTEND] Erro ao chamar fun√ß√£o de notifica√ß√£o por e-mail:', error);
      console.error('‚ùå [FRONTEND] Detalhes do erro:', JSON.stringify(error, null, 2));
      return; // üõë Para se houver erro, mas n√£o bloqueia a reserva
    }

    // ===== SUCESSO NO ENVIO =====
    console.log('‚úÖ [FRONTEND] Notifica√ß√£o por e-mail enviada com sucesso:', data);
  } catch (error) {
    // ===== TRATAMENTO DE EXCE√á√ïES GERAIS =====
    // Captura qualquer erro inesperado (rede, parsing, etc.)
    // ‚ö†Ô∏è Importante: Este erro n√£o deve bloquear a cria√ß√£o/cancelamento da reserva
    // O e-mail √© um "extra", a opera√ß√£o principal deve continuar funcionando
    console.error('üí• Exce√ß√£o na fun√ß√£o sendReservationNotification:', error);
  }
};